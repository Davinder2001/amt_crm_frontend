name: Deploy to Hostinger VM (HTTP)

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Create deployment package
      run: |
        tar --warning=no-file-changed -czf amt-crm-frontend.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.next' \
          --exclude='.env*' \
          --exclude='*.log' \
          . || true

    - name: Deploy to Hostinger VM
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        key: ${{ secrets.HOSTINGER_SSH_KEY }}
        source: "amt-crm-frontend.tar.gz"
        target: "/tmp/"
        strip_components: 0

    - name: Deploy and restart containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        key: ${{ secrets.HOSTINGER_SSH_KEY }}
        script: |
          echo "🔍 Checking current port usage..."
          sudo netstat -tulpn | grep :80 || echo "Port 80 is free"
          sudo netstat -tulpn | grep :443 || echo "Port 443 is free"
          
          # Check for existing Docker containers
          echo "🐳 Checking existing Docker containers..."
          docker ps -a
          
          # Check for existing services
          echo "🔧 Checking existing services..."
          sudo systemctl status nginx 2>/dev/null || echo "Nginx not running as system service"
          sudo systemctl status apache2 2>/dev/null || echo "Apache2 not running as system service"
          
          # Only stop services if they're not Docker-based
          echo "🛑 Stopping non-Docker web services..."
          if sudo systemctl is-active --quiet nginx && ! docker ps | grep -q nginx; then
            echo "Stopping system nginx..."
            sudo systemctl stop nginx
          fi
          if sudo systemctl is-active --quiet apache2 && ! docker ps | grep -q apache; then
            echo "Stopping system apache2..."
            sudo systemctl stop apache2
          fi
          
          # Wait a moment for ports to be released
          sleep 3
          
          # Check if port 80 is still in use by non-Docker processes
          if sudo netstat -tulpn | grep :80 | grep -v docker; then
            echo "⚠️  Port 80 is still in use by non-Docker processes. Checking..."
            sudo netstat -tulpn | grep :80
            echo "Force stopping non-Docker processes on port 80..."
            sudo fuser -k 80/tcp 2>/dev/null || true
            sleep 3
          fi
          
          # Create /srv directory if it doesn't exist
          sudo mkdir -p /srv/amt-crm-frontend
          sudo chown $USER:$USER /srv/amt-crm-frontend
          
          # Stop only our frontend containers
          cd /srv/amt-crm-frontend
          if [ -f docker-compose.http.yml ]; then
            echo "🛑 Stopping existing frontend containers..."
            docker-compose -f docker-compose.http.yml down
          fi
          
          # Extract new deployment
          cd /srv/amt-crm-frontend
          tar -xzf /tmp/amt-crm-frontend.tar.gz --strip-components=0
          rm /tmp/amt-crm-frontend.tar.gz
          
          # Create logs directory for nginx
          mkdir -p docker/nginx/logs
          
          # Create environment file if it doesn't exist
          if [ ! -f env.docker ]; then
            cat > env.docker << EOF
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=http://api.himmanav.com
          NEXT_PUBLIC_SOCKET_URL=ws://api.himmanav.com
          NEXT_PUBLIC_APP_URL=http://himmanav.com
          EOF
          fi
          
          # Build and start containers
          echo "🔨 Building and starting frontend containers..."
          docker-compose -f docker-compose.http.yml build --no-cache
          docker-compose -f docker-compose.http.yml up -d
          
          # Clean up old images (but be careful not to remove backend images)
          echo "🧹 Cleaning up unused Docker images..."
          docker image prune -f
          
          # Check deployment status
          sleep 10
          echo "📊 Frontend container status:"
          docker-compose -f docker-compose.http.yml ps
          
          echo "📊 All Docker containers:"
          docker ps
          
          # Test health endpoint
          echo "🏥 Testing frontend health endpoint..."
          curl -f http://localhost/health || echo "Frontend health check failed"
          
          # Test backend connectivity (if available)
          echo "🔗 Testing backend connectivity..."
          curl -f http://api.himmanav.com/health 2>/dev/null || echo "Backend health check failed (this is normal if backend is not deployed yet)"
          
          echo "✅ Frontend deployment completed successfully!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Frontend deployment to Hostinger VM completed successfully!"
          echo "🌐 Frontend: http://himmanav.com"
          echo "🔧 Frontend Health: http://himmanav.com/health"
          echo "🔗 Backend API: http://api.himmanav.com"
        else
          echo "❌ Frontend deployment failed!"
        fi 